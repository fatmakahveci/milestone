ruleorder: create_wgmlst_schema > call_allele > create_cgmlst_schema

configfile: "config.yaml"

import glob, os

rule all:
	input:
		config["cgmlst_dir"]

rule create_wgmlst_schema:
	input:
		genome_dir = config["genome_dir"],
		trn_file = config["training_file"],
	output:
		directory(config["schema_seed_dir"])
	message: "chewBBACA is creating whole genome MLST (wgMLST) schema."
	log: "logs/chewbbaca.log"
	threads: config["parameters"]["threads"]
	shell:
		"chewBBACA.py CreateSchema -i {input.genome_dir} -o {output} --ptf {input.trn_file} --cpu {threads}"

rule call_allele:
	input:
		genome_dir = config["genome_dir"],
		trn_file = config["training_file"],
		schema_seed_dir = config["schema_seed_dir"],
	output:
		directory(config["allele_call_dir"])
	message: "chewBBACA is calling alleles."
	log: "logs/chewbbaca.log"
	threads: config["parameters"]["threads"]
	shell:
		"chewBBACA.py AlleleCall -i {input.genome_dir} -g {input.schema_seed_dir} -o {output} --cpu {threads} --ptf {input.trn_file}"

# test call quality?

rule create_cgmlst_schema:
	input:
		allele_call_dir = config["allele_call_dir"]
	output:
		directory(config["cgmlst_dir"])
	message: "chewBBACA is creating core genome MLST (cgMLST) schema."
	log: "logs/chewbbaca.log"
	threads: config["parameters"]["threads"]
	run:
		repeated_loci = (glob.glob(f"{input.allele_call_dir}/result*/RepeatedLoci.txt"))[0]
		results_alleles_tsv = (glob.glob(f"{input.allele_call_dir}/result*/results_alleles.tsv"))[0]
		os.system(f"chewBBACA.py ExtractCgMLST -i {results_alleles_tsv} -r {repeated_loci} -p 0.95 -o {output}")